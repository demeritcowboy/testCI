name: Create mink merge request
on:
  workflow_dispatch:
    inputs:
      repourl:
        description: repo url
        required: true
jobs:
  phpunit:
    runs-on: ubuntu-latest
    name: Create merge request
    steps:
      - uses: shivammathur/setup-php@v2
        with:
            php-version: 7.3
            extensions: dom, curl, libxml, mbstring, zip, pdo, mysql, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
            coverage: none
            tools: composer:v1
      - name: Download civix
        run: |
          cd $GITHUB_WORKSPACE
          git clone https://github.com/totten/civix.git civix
          cd civix
          COMPOSER_MEMORY_LIMIT=-1 composer install
          # patch it
          curl -L -o mink.patch https://github.com/totten/civix/compare/master...demeritcowboy:mink.patch
          git apply mink.patch
      - name: Get some code and do stuff to it
        run: |
          cd $GITHUB_WORKSPACE
          git clone ${{ github.event.inputs.repourl }} thing
          cd thing
          git checkout -b mink
          # generate test patch
          export PATH=$PATH:$GITHUB_WORKSPACE/civix/bin
          NAMESPACE=`php -r '$x = simplexml_load_file("info.xml"); $ns = $x->civix[0]->namespace; $nsexp = explode("/", $ns); echo array_pop($nsexp);'`
          civix generate:test --template=mink "Civi\\$NAMESPACE\Mink\FirstTest"
          git add phpunit.mink.xml.dist tests/phpunit
          # why doesn't this display anything?
          git diff
      - uses: actions/upload-artifact@v2
        with:
          name: let us see it
          path: '/home/runner/work/testCI/testCI/thing'
      - name: fork project
        run: |
          repourl=${{ github.event.inputs.repourl }}
          temp1=${repourl%.git}
          extname=${temp1##*/}
          projectname=${temp1#https://*/}
          # close enough?
          urlencoded=${projectname//\//%2F}
          domain=${temp1%/$projectname}
          echo ${domain}/api/v4/projects/${urlencoded}/fork
          #curl -H "Authorization: Bearer ${{secrets.LABCO_API_KEY}}" -X POST ${domain}/api/v4/projects/${urlencoded}/fork
          # we're supposed to now query the import status of the new project repeatedly until it has been created
          echo ${domain}/api/v4/projects/civicarrot%2F${extname}
          projectinfo=`curl -H "Authorization: Bearer ${{secrets.LABCO_API_KEY}}" ${domain}/api/v4/projects/civicarrot%2F${extname}`
          echo $projectinfo
          echo env.projectinfo
          echo ${{fromJson(env.projectinfo).import_status}}
